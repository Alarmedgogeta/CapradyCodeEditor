package syntax;
/* Generated By:JavaCC: Do not edit this line. CapradyCodeConstants.java */

/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface CapradyCodeConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int IF = 1;
  /** RegularExpression Id. */
  int ELSE = 2;
  /** RegularExpression Id. */
  int ELSEIF = 3;
  /** RegularExpression Id. */
  int SWITCH = 4;
  /** RegularExpression Id. */
  int CASE = 5;
  /** RegularExpression Id. */
  int MAIN = 6;
  /** RegularExpression Id. */
  int FOR = 7;
  /** RegularExpression Id. */
  int FOREACH = 8;
  /** RegularExpression Id. */
  int WHILE = 9;
  /** RegularExpression Id. */
  int TYPEINT = 10;
  /** RegularExpression Id. */
  int TYPEFLOAT = 11;
  /** RegularExpression Id. */
  int READ = 12;
  /** RegularExpression Id. */
  int WRITE = 13;
  /** RegularExpression Id. */
  int PLUS = 14;
  /** RegularExpression Id. */
  int LESS = 15;
  /** RegularExpression Id. */
  int MULTIPLY = 16;
  /** RegularExpression Id. */
  int EXPONENT = 17;
  /** RegularExpression Id. */
  int DIVIDE = 18;
  /** RegularExpression Id. */
  int GREATERTHEN = 19;
  /** RegularExpression Id. */
  int SMALLERTHEN = 20;
  /** RegularExpression Id. */
  int GREATEREQUALTHEN = 21;
  /** RegularExpression Id. */
  int SMALLEREQUALTHEN = 22;
  /** RegularExpression Id. */
  int EQUALS = 23;
  /** RegularExpression Id. */
  int NOTEQUALS = 24;
  /** RegularExpression Id. */
  int ASIGNATION = 25;
  /** RegularExpression Id. */
  int TERNARY = 26;
  /** RegularExpression Id. */
  int ALTERNATIVE = 27;
  /** RegularExpression Id. */
  int SEMICOLON = 28;
  /** RegularExpression Id. */
  int COMMA = 29;
  /** RegularExpression Id. */
  int KEY1 = 30;
  /** RegularExpression Id. */
  int KEY2 = 31;
  /** RegularExpression Id. */
  int PAR1 = 32;
  /** RegularExpression Id. */
  int PAR2 = 33;
  /** RegularExpression Id. */
  int DIGIT = 34;
  /** RegularExpression Id. */
  int LETTER = 35;
  /** RegularExpression Id. */
  int INTEGER = 36;
  /** RegularExpression Id. */
  int FLOAT = 37;
  /** RegularExpression Id. */
  int STRING = 38;
  /** RegularExpression Id. */
  int COMMENT1 = 39;
  /** RegularExpression Id. */
  int COMMENTM = 40;
  /** RegularExpression Id. */
  int ID = 41;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\"si\"",
    "\"sino\"",
    "\"sino si\"",
    "\"switch\"",
    "\"caso\"",
    "\"principal\"",
    "\"para\"",
    "\"paracada\"",
    "\"mientras\"",
    "\"entero\"",
    "\"flotante\"",
    "\"leer\"",
    "\"escribir\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"**\"",
    "\"/\"",
    "\">\"",
    "\"<\"",
    "\">=\"",
    "\"<=\"",
    "\"==\"",
    "\"!=\"",
    "\"=\"",
    "\"?\"",
    "\":\"",
    "\";\"",
    "\",\"",
    "\"{\"",
    "\"}\"",
    "\"(\"",
    "\")\"",
    "<DIGIT>",
    "<LETTER>",
    "<INTEGER>",
    "<FLOAT>",
    "<STRING>",
    "<COMMENT1>",
    "<COMMENTM>",
    "<ID>",
    "\" \"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\t\"",
  };

}
