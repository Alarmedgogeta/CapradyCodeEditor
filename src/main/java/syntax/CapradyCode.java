package syntax;
/* Generated By:JavaCC: Do not edit this line. CapradyCode.java */
import syntaxtree.*;
import java.util.Vector;


public class CapradyCode implements CapradyCodeConstants {

  final public Tokens Tokens() throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   NodeToken n13;
   Token n14;
   NodeToken n15;
   Token n16;
   NodeToken n17;
   Token n18;
   NodeToken n19;
   Token n20;
   NodeToken n21;
   Token n22;
   NodeToken n23;
   Token n24;
   NodeToken n25;
   Token n26;
   NodeToken n27;
   Token n28;
   NodeToken n29;
   Token n30;
   NodeToken n31;
   Token n32;
   NodeToken n33;
   Token n34;
   NodeToken n35;
   Token n36;
   NodeToken n37;
   Token n38;
   NodeToken n39;
   Token n40;
   NodeToken n41;
   Token n42;
   NodeToken n43;
   Token n44;
   NodeToken n45;
   Token n46;
   NodeToken n47;
   Token n48;
   NodeToken n49;
   Token n50;
   NodeToken n51;
   Token n52;
   NodeToken n53;
   Token n54;
   NodeToken n55;
   Token n56;
   NodeToken n57;
   Token n58;
   NodeToken n59;
   Token n60;
   NodeToken n61;
   Token n62;
   NodeToken n63;
   Token n64;
   NodeToken n65;
   Token n66;
   NodeToken n67;
   Token n68;
   NodeToken n69;
   Token n70;
   NodeToken n71;
   Token n72;
   NodeToken n73;
   Token n74;
   NodeToken n75;
   Token n76;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IF:
      n2 = jj_consume_token(IF);
                n1 = JTBToolkit.makeNodeToken(n2);
        n0 = new NodeChoice(n1, 0);
      break;
    case ELSE:
      n4 = jj_consume_token(ELSE);
                  n3 = JTBToolkit.makeNodeToken(n4);
        n0 = new NodeChoice(n3, 1);
      break;
    case ELSEIF:
      n6 = jj_consume_token(ELSEIF);
                    n5 = JTBToolkit.makeNodeToken(n6);
        n0 = new NodeChoice(n5, 2);
      break;
    case SWITCH:
      n8 = jj_consume_token(SWITCH);
                    n7 = JTBToolkit.makeNodeToken(n8);
        n0 = new NodeChoice(n7, 3);
      break;
    case CASE:
      n10 = jj_consume_token(CASE);
                   n9 = JTBToolkit.makeNodeToken(n10);
        n0 = new NodeChoice(n9, 4);
      break;
    case FOR:
      n12 = jj_consume_token(FOR);
                  n11 = JTBToolkit.makeNodeToken(n12);
        n0 = new NodeChoice(n11, 5);
      break;
    case FOREACH:
      n14 = jj_consume_token(FOREACH);
                      n13 = JTBToolkit.makeNodeToken(n14);
        n0 = new NodeChoice(n13, 6);
      break;
    case WHILE:
      n16 = jj_consume_token(WHILE);
                    n15 = JTBToolkit.makeNodeToken(n16);
        n0 = new NodeChoice(n15, 7);
      break;
    case MAIN:
      n18 = jj_consume_token(MAIN);
                   n17 = JTBToolkit.makeNodeToken(n18);
        n0 = new NodeChoice(n17, 8);
      break;
    case TYPEINT:
      n20 = jj_consume_token(TYPEINT);
                      n19 = JTBToolkit.makeNodeToken(n20);
        n0 = new NodeChoice(n19, 9);
      break;
    case TYPEFLOAT:
      n22 = jj_consume_token(TYPEFLOAT);
                        n21 = JTBToolkit.makeNodeToken(n22);
        n0 = new NodeChoice(n21, 10);
      break;
    case READ:
      n24 = jj_consume_token(READ);
                   n23 = JTBToolkit.makeNodeToken(n24);
        n0 = new NodeChoice(n23, 11);
      break;
    case WRITE:
      n26 = jj_consume_token(WRITE);
                    n25 = JTBToolkit.makeNodeToken(n26);
        n0 = new NodeChoice(n25, 12);
      break;
    case PLUS:
      n28 = jj_consume_token(PLUS);
                   n27 = JTBToolkit.makeNodeToken(n28);
        n0 = new NodeChoice(n27, 13);
      break;
    case LESS:
      n30 = jj_consume_token(LESS);
                   n29 = JTBToolkit.makeNodeToken(n30);
        n0 = new NodeChoice(n29, 14);
      break;
    case MULTIPLY:
      n32 = jj_consume_token(MULTIPLY);
                       n31 = JTBToolkit.makeNodeToken(n32);
        n0 = new NodeChoice(n31, 15);
      break;
    case EXPONENT:
      n34 = jj_consume_token(EXPONENT);
                       n33 = JTBToolkit.makeNodeToken(n34);
        n0 = new NodeChoice(n33, 16);
      break;
    case DIVIDE:
      n36 = jj_consume_token(DIVIDE);
                     n35 = JTBToolkit.makeNodeToken(n36);
        n0 = new NodeChoice(n35, 17);
      break;
    case GREATERTHEN:
      n38 = jj_consume_token(GREATERTHEN);
                          n37 = JTBToolkit.makeNodeToken(n38);
        n0 = new NodeChoice(n37, 18);
      break;
    case SMALLERTHEN:
      n40 = jj_consume_token(SMALLERTHEN);
                          n39 = JTBToolkit.makeNodeToken(n40);
        n0 = new NodeChoice(n39, 19);
      break;
    case GREATEREQUALTHEN:
      n42 = jj_consume_token(GREATEREQUALTHEN);
                               n41 = JTBToolkit.makeNodeToken(n42);
        n0 = new NodeChoice(n41, 20);
      break;
    case SMALLEREQUALTHEN:
      n44 = jj_consume_token(SMALLEREQUALTHEN);
                               n43 = JTBToolkit.makeNodeToken(n44);
        n0 = new NodeChoice(n43, 21);
      break;
    case EQUALS:
      n46 = jj_consume_token(EQUALS);
                     n45 = JTBToolkit.makeNodeToken(n46);
        n0 = new NodeChoice(n45, 22);
      break;
    case ASIGNATION:
      n48 = jj_consume_token(ASIGNATION);
                         n47 = JTBToolkit.makeNodeToken(n48);
        n0 = new NodeChoice(n47, 23);
      break;
    case TERNARY:
      n50 = jj_consume_token(TERNARY);
                      n49 = JTBToolkit.makeNodeToken(n50);
        n0 = new NodeChoice(n49, 24);
      break;
    case ALTERNATIVE:
      n52 = jj_consume_token(ALTERNATIVE);
                          n51 = JTBToolkit.makeNodeToken(n52);
        n0 = new NodeChoice(n51, 25);
      break;
    case SEMICOLON:
      n54 = jj_consume_token(SEMICOLON);
                        n53 = JTBToolkit.makeNodeToken(n54);
        n0 = new NodeChoice(n53, 26);
      break;
    case COMMA:
      n56 = jj_consume_token(COMMA);
                    n55 = JTBToolkit.makeNodeToken(n56);
        n0 = new NodeChoice(n55, 27);
      break;
    case KEY1:
      n58 = jj_consume_token(KEY1);
                   n57 = JTBToolkit.makeNodeToken(n58);
        n0 = new NodeChoice(n57, 28);
      break;
    case KEY2:
      n60 = jj_consume_token(KEY2);
                   n59 = JTBToolkit.makeNodeToken(n60);
        n0 = new NodeChoice(n59, 29);
      break;
    case PAR1:
      n62 = jj_consume_token(PAR1);
                   n61 = JTBToolkit.makeNodeToken(n62);
        n0 = new NodeChoice(n61, 30);
      break;
    case PAR2:
      n64 = jj_consume_token(PAR2);
                   n63 = JTBToolkit.makeNodeToken(n64);
        n0 = new NodeChoice(n63, 31);
      break;
    case INTEGER:
      n66 = jj_consume_token(INTEGER);
                      n65 = JTBToolkit.makeNodeToken(n66);
        n0 = new NodeChoice(n65, 32);
      break;
    case FLOAT:
      n68 = jj_consume_token(FLOAT);
                    n67 = JTBToolkit.makeNodeToken(n68);
        n0 = new NodeChoice(n67, 33);
      break;
    case STRING:
      n70 = jj_consume_token(STRING);
                     n69 = JTBToolkit.makeNodeToken(n70);
        n0 = new NodeChoice(n69, 34);
      break;
    case COMMENT1:
      n72 = jj_consume_token(COMMENT1);
                       n71 = JTBToolkit.makeNodeToken(n72);
        n0 = new NodeChoice(n71, 35);
      break;
    case COMMENTM:
      n74 = jj_consume_token(COMMENTM);
                       n73 = JTBToolkit.makeNodeToken(n74);
        n0 = new NodeChoice(n73, 36);
      break;
    case ID:
      n76 = jj_consume_token(ID);
                 n75 = JTBToolkit.makeNodeToken(n76);
        n0 = new NodeChoice(n75, 37);
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new Tokens(n0);}
    throw new Error("Missing return statement in function");
  }

  final public Programa Programa() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeListOptional n4 = new NodeListOptional();
   Sentencia n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
    n1 = jj_consume_token(MAIN);
               n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(KEY1);
               n2 = JTBToolkit.makeNodeToken(n3);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
      case FOR:
      case WHILE:
      case TYPEINT:
      case TYPEFLOAT:
      case READ:
      case WRITE:
      case COMMENT1:
      case COMMENTM:
      case ID:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_1;
      }
      n5 = Sentencia();
        n4.addNode(n5);
    }
     n4.nodes.trimToSize();
    n7 = jj_consume_token(KEY2);
               n6 = JTBToolkit.makeNodeToken(n7);
    n9 = jj_consume_token(0);
      n9.beginColumn++; n9.endColumn++;
      n8 = JTBToolkit.makeNodeToken(n9);
     {if (true) return new Programa(n0,n2,n4,n6,n8);}
    throw new Error("Missing return statement in function");
  }

  final public Sentencia Sentencia() throws ParseException {
   NodeChoice n0;
   Sent_if n1;
   Sent_while n2;
   Sent_for n3;
   NodeSequence n4;
   Declaration n5;
   NodeToken n6;
   Token n7;
   NodeSequence n8;
   Sent_read n9;
   NodeToken n10;
   Token n11;
   NodeSequence n12;
   Sent_write n13;
   NodeToken n14;
   Token n15;
   NodeSequence n16;
   Asignation n17;
   NodeToken n18;
   Token n19;
   NodeToken n20;
   Token n21;
   NodeToken n22;
   Token n23;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IF:
      n1 = Sent_if();
        n0 = new NodeChoice(n1, 0);
      break;
    case WHILE:
      n2 = Sent_while();
        n0 = new NodeChoice(n2, 1);
      break;
    case FOR:
      n3 = Sent_for();
        n0 = new NodeChoice(n3, 2);
      break;
    case TYPEINT:
    case TYPEFLOAT:
        n4 = new NodeSequence(2);
      n5 = Declaration();
        n4.addNode(n5);
      n7 = jj_consume_token(SEMICOLON);
                       n6 = JTBToolkit.makeNodeToken(n7);
        n4.addNode(n6);
        n0 = new NodeChoice(n4, 3);
      break;
    case READ:
        n8 = new NodeSequence(2);
      n9 = Sent_read();
        n8.addNode(n9);
      n11 = jj_consume_token(SEMICOLON);
                        n10 = JTBToolkit.makeNodeToken(n11);
        n8.addNode(n10);
        n0 = new NodeChoice(n8, 4);
      break;
    case WRITE:
        n12 = new NodeSequence(2);
      n13 = Sent_write();
        n12.addNode(n13);
      n15 = jj_consume_token(SEMICOLON);
                        n14 = JTBToolkit.makeNodeToken(n15);
        n12.addNode(n14);
        n0 = new NodeChoice(n12, 5);
      break;
    case ID:
        n16 = new NodeSequence(2);
      n17 = Asignation();
        n16.addNode(n17);
      n19 = jj_consume_token(SEMICOLON);
                        n18 = JTBToolkit.makeNodeToken(n19);
        n16.addNode(n18);
        n0 = new NodeChoice(n16, 6);
      break;
    case COMMENT1:
      n21 = jj_consume_token(COMMENT1);
                       n20 = JTBToolkit.makeNodeToken(n21);
        n0 = new NodeChoice(n20, 7);
      break;
    case COMMENTM:
      n23 = jj_consume_token(COMMENTM);
                       n22 = JTBToolkit.makeNodeToken(n23);
        n0 = new NodeChoice(n22, 8);
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new Sentencia(n0);}
    throw new Error("Missing return statement in function");
  }

  final public Sent_if Sent_if() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Exp n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeListOptional n9 = new NodeListOptional();
   Sentencia n10;
   NodeToken n11;
   Token n12;
   NodeOptional n13 = new NodeOptional();
   NodeSequence n14;
   NodeToken n15;
   Token n16;
   NodeToken n17;
   Token n18;
   Exp n19;
   NodeToken n20;
   Token n21;
   NodeToken n22;
   Token n23;
   NodeListOptional n24;
   Sentencia n25;
   NodeToken n26;
   Token n27;
   NodeOptional n28 = new NodeOptional();
   NodeSequence n29;
   NodeToken n30;
   Token n31;
   NodeToken n32;
   Token n33;
   NodeListOptional n34;
   Sentencia n35;
   NodeToken n36;
   Token n37;
    n1 = jj_consume_token(IF);
             n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PAR1);
               n2 = JTBToolkit.makeNodeToken(n3);
    n4 = Exp();
    n6 = jj_consume_token(PAR2);
               n5 = JTBToolkit.makeNodeToken(n6);
    n8 = jj_consume_token(KEY1);
               n7 = JTBToolkit.makeNodeToken(n8);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
      case FOR:
      case WHILE:
      case TYPEINT:
      case TYPEFLOAT:
      case READ:
      case WRITE:
      case COMMENT1:
      case COMMENTM:
      case ID:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_2;
      }
      n10 = Sentencia();
        n9.addNode(n10);
    }
     n9.nodes.trimToSize();
    n12 = jj_consume_token(KEY2);
                n11 = JTBToolkit.makeNodeToken(n12);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELSEIF:
        n24 = new NodeListOptional();
        n14 = new NodeSequence(7);
      n16 = jj_consume_token(ELSEIF);
                     n15 = JTBToolkit.makeNodeToken(n16);
        n14.addNode(n15);
      n18 = jj_consume_token(PAR1);
                   n17 = JTBToolkit.makeNodeToken(n18);
        n14.addNode(n17);
      n19 = Exp();
        n14.addNode(n19);
      n21 = jj_consume_token(PAR2);
                   n20 = JTBToolkit.makeNodeToken(n21);
        n14.addNode(n20);
      n23 = jj_consume_token(KEY1);
                   n22 = JTBToolkit.makeNodeToken(n23);
        n14.addNode(n22);
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IF:
        case FOR:
        case WHILE:
        case TYPEINT:
        case TYPEFLOAT:
        case READ:
        case WRITE:
        case COMMENT1:
        case COMMENTM:
        case ID:
          ;
          break;
        default:
          jj_la1[4] = jj_gen;
          break label_3;
        }
        n25 = Sentencia();
           n24.addNode(n25);
      }
        n24.nodes.trimToSize();
        n14.addNode(n24);
      n27 = jj_consume_token(KEY2);
                   n26 = JTBToolkit.makeNodeToken(n27);
        n14.addNode(n26);
        n13.addNode(n14);
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELSE:
        n34 = new NodeListOptional();
        n29 = new NodeSequence(4);
      n31 = jj_consume_token(ELSE);
                   n30 = JTBToolkit.makeNodeToken(n31);
        n29.addNode(n30);
      n33 = jj_consume_token(KEY1);
                   n32 = JTBToolkit.makeNodeToken(n33);
        n29.addNode(n32);
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IF:
        case FOR:
        case WHILE:
        case TYPEINT:
        case TYPEFLOAT:
        case READ:
        case WRITE:
        case COMMENT1:
        case COMMENTM:
        case ID:
          ;
          break;
        default:
          jj_la1[6] = jj_gen;
          break label_4;
        }
        n35 = Sentencia();
           n34.addNode(n35);
      }
        n34.nodes.trimToSize();
        n29.addNode(n34);
      n37 = jj_consume_token(KEY2);
                   n36 = JTBToolkit.makeNodeToken(n37);
        n29.addNode(n36);
        n28.addNode(n29);
      break;
    default:
      jj_la1[7] = jj_gen;
      ;
    }
     {if (true) return new Sent_if(n0,n2,n4,n5,n7,n9,n11,n13,n28);}
    throw new Error("Missing return statement in function");
  }

  final public Sent_while Sent_while() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Exp n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeListOptional n9 = new NodeListOptional();
   Sentencia n10;
   NodeToken n11;
   Token n12;
    n1 = jj_consume_token(WHILE);
                n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PAR1);
               n2 = JTBToolkit.makeNodeToken(n3);
    n4 = Exp();
    n6 = jj_consume_token(PAR2);
               n5 = JTBToolkit.makeNodeToken(n6);
    n8 = jj_consume_token(KEY1);
               n7 = JTBToolkit.makeNodeToken(n8);
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
      case FOR:
      case WHILE:
      case TYPEINT:
      case TYPEFLOAT:
      case READ:
      case WRITE:
      case COMMENT1:
      case COMMENTM:
      case ID:
        ;
        break;
      default:
        jj_la1[8] = jj_gen;
        break label_5;
      }
      n10 = Sentencia();
        n9.addNode(n10);
    }
     n9.nodes.trimToSize();
    n12 = jj_consume_token(KEY2);
                n11 = JTBToolkit.makeNodeToken(n12);
     {if (true) return new Sent_while(n0,n2,n4,n5,n7,n9,n11);}
    throw new Error("Missing return statement in function");
  }

  final public Sent_for Sent_for() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Asignation n4;
   NodeToken n5;
   Token n6;
   Exp n7;
   NodeToken n8;
   Token n9;
   Asignation n10;
   NodeToken n11;
   Token n12;
   NodeToken n13;
   Token n14;
   NodeToken n15;
   Token n16;
   NodeListOptional n17 = new NodeListOptional();
   Sentencia n18;
   NodeToken n19;
   Token n20;
    n1 = jj_consume_token(FOR);
              n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PAR1);
               n2 = JTBToolkit.makeNodeToken(n3);
    n4 = Asignation();
    n6 = jj_consume_token(SEMICOLON);
                    n5 = JTBToolkit.makeNodeToken(n6);
    n7 = Exp();
    n9 = jj_consume_token(SEMICOLON);
                    n8 = JTBToolkit.makeNodeToken(n9);
    n10 = Asignation();
    n12 = jj_consume_token(SEMICOLON);
                     n11 = JTBToolkit.makeNodeToken(n12);
    n14 = jj_consume_token(PAR2);
                n13 = JTBToolkit.makeNodeToken(n14);
    n16 = jj_consume_token(KEY1);
                n15 = JTBToolkit.makeNodeToken(n16);
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
      case FOR:
      case WHILE:
      case TYPEINT:
      case TYPEFLOAT:
      case READ:
      case WRITE:
      case COMMENT1:
      case COMMENTM:
      case ID:
        ;
        break;
      default:
        jj_la1[9] = jj_gen;
        break label_6;
      }
      n18 = Sentencia();
        n17.addNode(n18);
    }
     n17.nodes.trimToSize();
    n20 = jj_consume_token(KEY2);
                n19 = JTBToolkit.makeNodeToken(n20);
     {if (true) return new Sent_for(n0,n2,n4,n5,n7,n8,n10,n11,n13,n15,n17,n19);}
    throw new Error("Missing return statement in function");
  }

  final public Declaration Declaration() throws ParseException {
   Tipo n0;
   NodeToken n1;
   Token n2;
   NodeOptional n3 = new NodeOptional();
   NodeSequence n4;
   NodeToken n5;
   Token n6;
   Exp n7;
   NodeOptional n8;
   NodeSequence n9;
   NodeToken n10;
   Token n11;
   Exp n12;
   NodeToken n13;
   Token n14;
   Exp n15;
    n0 = Tipo();
    n2 = jj_consume_token(ID);
             n1 = JTBToolkit.makeNodeToken(n2);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASIGNATION:
        n8 = new NodeOptional();
        n4 = new NodeSequence(3);
      n6 = jj_consume_token(ASIGNATION);
                        n5 = JTBToolkit.makeNodeToken(n6);
        n4.addNode(n5);
      n7 = Exp();
        n4.addNode(n7);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TERNARY:
           n9 = new NodeSequence(4);
        n11 = jj_consume_token(TERNARY);
                         n10 = JTBToolkit.makeNodeToken(n11);
           n9.addNode(n10);
        n12 = Exp();
           n9.addNode(n12);
        n14 = jj_consume_token(ALTERNATIVE);
                             n13 = JTBToolkit.makeNodeToken(n14);
           n9.addNode(n13);
        n15 = Exp();
           n9.addNode(n15);
           n8.addNode(n9);
        break;
      default:
        jj_la1[10] = jj_gen;
        ;
      }
        n4.addNode(n8);
        n3.addNode(n4);
      break;
    default:
      jj_la1[11] = jj_gen;
      ;
    }
     {if (true) return new Declaration(n0,n1,n3);}
    throw new Error("Missing return statement in function");
  }

  final public Tipo Tipo() throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TYPEINT:
      n2 = jj_consume_token(TYPEINT);
                     n1 = JTBToolkit.makeNodeToken(n2);
        n0 = new NodeChoice(n1, 0);
      break;
    case TYPEFLOAT:
      n4 = jj_consume_token(TYPEFLOAT);
                       n3 = JTBToolkit.makeNodeToken(n4);
        n0 = new NodeChoice(n3, 1);
      break;
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new Tipo(n0);}
    throw new Error("Missing return statement in function");
  }

  final public Sent_read Sent_read() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
    n1 = jj_consume_token(READ);
               n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PAR1);
               n2 = JTBToolkit.makeNodeToken(n3);
    n5 = jj_consume_token(ID);
             n4 = JTBToolkit.makeNodeToken(n5);
    n7 = jj_consume_token(PAR2);
               n6 = JTBToolkit.makeNodeToken(n7);
     {if (true) return new Sent_read(n0,n2,n4,n6);}
    throw new Error("Missing return statement in function");
  }

  final public Sent_write Sent_write() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeOptional n6 = new NodeOptional();
   Exp n7;
   NodeToken n8;
   Token n9;
    n1 = jj_consume_token(WRITE);
                n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PAR1);
               n2 = JTBToolkit.makeNodeToken(n3);
    n5 = jj_consume_token(STRING);
                 n4 = JTBToolkit.makeNodeToken(n5);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PAR1:
    case INTEGER:
    case FLOAT:
    case ID:
      n7 = Exp();
        n6.addNode(n7);
      break;
    default:
      jj_la1[13] = jj_gen;
      ;
    }
    n9 = jj_consume_token(PAR2);
               n8 = JTBToolkit.makeNodeToken(n9);
     {if (true) return new Sent_write(n0,n2,n4,n6,n8);}
    throw new Error("Missing return statement in function");
  }

  final public Asignation Asignation() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Exp n4;
   NodeOptional n5 = new NodeOptional();
   NodeSequence n6;
   NodeToken n7;
   Token n8;
   Exp n9;
   NodeToken n10;
   Token n11;
   Exp n12;
    n1 = jj_consume_token(ID);
             n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(ASIGNATION);
                     n2 = JTBToolkit.makeNodeToken(n3);
    n4 = Exp();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TERNARY:
        n6 = new NodeSequence(4);
      n8 = jj_consume_token(TERNARY);
                     n7 = JTBToolkit.makeNodeToken(n8);
        n6.addNode(n7);
      n9 = Exp();
        n6.addNode(n9);
      n11 = jj_consume_token(ALTERNATIVE);
                          n10 = JTBToolkit.makeNodeToken(n11);
        n6.addNode(n10);
      n12 = Exp();
        n6.addNode(n12);
        n5.addNode(n6);
      break;
    default:
      jj_la1[14] = jj_gen;
      ;
    }
     {if (true) return new Asignation(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  final public Exp Exp() throws ParseException {
   Exp_simple n0;
   NodeOptional n1 = new NodeOptional();
   NodeSequence n2;
   Op_comparation n3;
   Exp_simple n4;
    n0 = Exp_simple();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case GREATERTHEN:
    case SMALLERTHEN:
    case GREATEREQUALTHEN:
    case SMALLEREQUALTHEN:
    case EQUALS:
    case NOTEQUALS:
        n2 = new NodeSequence(2);
      n3 = Op_comparation();
        n2.addNode(n3);
      n4 = Exp_simple();
        n2.addNode(n4);
        n1.addNode(n2);
      break;
    default:
      jj_la1[15] = jj_gen;
      ;
    }
     {if (true) return new Exp(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  final public Op_comparation Op_comparation() throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SMALLERTHEN:
      n2 = jj_consume_token(SMALLERTHEN);
                         n1 = JTBToolkit.makeNodeToken(n2);
        n0 = new NodeChoice(n1, 0);
      break;
    case GREATERTHEN:
      n4 = jj_consume_token(GREATERTHEN);
                         n3 = JTBToolkit.makeNodeToken(n4);
        n0 = new NodeChoice(n3, 1);
      break;
    case SMALLEREQUALTHEN:
      n6 = jj_consume_token(SMALLEREQUALTHEN);
                              n5 = JTBToolkit.makeNodeToken(n6);
        n0 = new NodeChoice(n5, 2);
      break;
    case GREATEREQUALTHEN:
      n8 = jj_consume_token(GREATEREQUALTHEN);
                              n7 = JTBToolkit.makeNodeToken(n8);
        n0 = new NodeChoice(n7, 3);
      break;
    case EQUALS:
      n10 = jj_consume_token(EQUALS);
                     n9 = JTBToolkit.makeNodeToken(n10);
        n0 = new NodeChoice(n9, 4);
      break;
    case NOTEQUALS:
      n12 = jj_consume_token(NOTEQUALS);
                        n11 = JTBToolkit.makeNodeToken(n12);
        n0 = new NodeChoice(n11, 5);
      break;
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new Op_comparation(n0);}
    throw new Error("Missing return statement in function");
  }

  final public Exp_simple Exp_simple() throws ParseException {
   Term n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   Op_low n3;
   Term n4;
    n0 = Term();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case LESS:
        ;
        break;
      default:
        jj_la1[17] = jj_gen;
        break label_7;
      }
        n2 = new NodeSequence(2);
      n3 = Op_low();
        n2.addNode(n3);
      n4 = Term();
        n2.addNode(n4);
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     {if (true) return new Exp_simple(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  final public Op_low Op_low() throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
      n2 = jj_consume_token(PLUS);
               n1 = JTBToolkit.makeNodeToken(n2);
        n0 = new NodeChoice(n1, 0);
      break;
    case LESS:
      n4 = jj_consume_token(LESS);
               n3 = JTBToolkit.makeNodeToken(n4);
        n0 = new NodeChoice(n3, 1);
      break;
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new Op_low(n0);}
    throw new Error("Missing return statement in function");
  }

  final public Term Term() throws ParseException {
   Factor n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   Op_high n3;
   Factor n4;
    n0 = Factor();
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULTIPLY:
      case DIVIDE:
        ;
        break;
      default:
        jj_la1[19] = jj_gen;
        break label_8;
      }
        n2 = new NodeSequence(2);
      n3 = Op_high();
        n2.addNode(n3);
      n4 = Factor();
        n2.addNode(n4);
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     {if (true) return new Term(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  final public Op_high Op_high() throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MULTIPLY:
      n2 = jj_consume_token(MULTIPLY);
               n1 = JTBToolkit.makeNodeToken(n2);
        n0 = new NodeChoice(n1, 0);
      break;
    case DIVIDE:
      n4 = jj_consume_token(DIVIDE);
               n3 = JTBToolkit.makeNodeToken(n4);
        n0 = new NodeChoice(n3, 1);
      break;
    default:
      jj_la1[20] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new Op_high(n0);}
    throw new Error("Missing return statement in function");
  }

  final public Factor Factor() throws ParseException {
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   Exp n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PAR1:
        n1 = new NodeSequence(3);
      n3 = jj_consume_token(PAR1);
                  n2 = JTBToolkit.makeNodeToken(n3);
        n1.addNode(n2);
      n4 = Exp();
        n1.addNode(n4);
      n6 = jj_consume_token(PAR2);
                  n5 = JTBToolkit.makeNodeToken(n6);
        n1.addNode(n5);
        n0 = new NodeChoice(n1, 0);
      break;
    case FLOAT:
      n8 = jj_consume_token(FLOAT);
                   n7 = JTBToolkit.makeNodeToken(n8);
        n0 = new NodeChoice(n7, 1);
      break;
    case INTEGER:
      n10 = jj_consume_token(INTEGER);
                      n9 = JTBToolkit.makeNodeToken(n10);
        n0 = new NodeChoice(n9, 2);
      break;
    case ID:
      n12 = jj_consume_token(ID);
                 n11 = JTBToolkit.makeNodeToken(n12);
        n0 = new NodeChoice(n11, 3);
      break;
    default:
      jj_la1[21] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new Factor(n0);}
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public CapradyCodeTokenManager token_source;
  JavaCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[22];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0xfefffffe,0x3e82,0x3e82,0x3e82,0x3e82,0x8,0x3e82,0x4,0x3e82,0x3e82,0x4000000,0x2000000,0xc00,0x0,0x4000000,0x1f80000,0x1f80000,0xc000,0xc000,0x50000,0x50000,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x3f3,0x380,0x380,0x380,0x380,0x0,0x380,0x0,0x380,0x380,0x0,0x0,0x0,0x231,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x231,};
   }

  /** Constructor with InputStream. */
  public CapradyCode(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public CapradyCode(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new CapradyCodeTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public CapradyCode(java.io.Reader stream) {
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new CapradyCodeTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public CapradyCode(CapradyCodeTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(CapradyCodeTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[46];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 22; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 46; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}

class JTBToolkit {
   static NodeToken makeNodeToken(Token t) {
      return new NodeToken(t.image.intern(), t.kind, t.beginLine, t.beginColumn, t.endLine, t.endColumn);
   }
}
