package lexic;

import java.util.ArrayList;

/* Generated By:JavaCC: Do not edit this line. CapradyCode.java */
public class CapradyCode implements CapradyCodeConstants {

    //Inician mis modificaciones al codigo
    final public void ProbarLexico(ArrayList<String> listaDeTokens) throws ParseException {
        label_1:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case IF:
                case ELSE:
                case ELSEIF:
                case SWITCH:
                case CASE:
                case MAIN:
                case FOR:
                case FOREACH:
                case WHILE:
                case TYPEINT:
                case TYPEFLOAT:
                case READ:
                case WRITE:
                case PLUS:
                case LESS:
                case MULTIPLY:
                case EXPONENT:
                case DIVIDE:
                case GREATERTHEN:
                case SMALLERTHEN:
                case GREATEREQUALTHEN:
                case SMALLEREQUALTHEN:
                case EQUALS:
                case NOTEQUALS:
                case ASIGNATION:
                case TERNARY:
                case ALTERNATIVE:
                case SEMICOLON:
                case COMMA:
                case KEY1:
                case KEY2:
                case PAR1:
                case PAR2:
                case INTEGER:
                case FLOAT:
                case STRING:
                case COMMENT1:
                case COMMENTM:
                case ID:
        ;
                    break;
                default:
                    jj_la1[1] = jj_gen;
                    break label_1;
            }
            Tokens(listaDeTokens);
        }
        jj_consume_token(0);
    }

    final public void Tokens(ArrayList<String> listaDeTokens) throws ParseException {
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case IF:
                listaDeTokens.add("IF : si");
                jj_consume_token(IF);
                break;
            case ELSE:
                listaDeTokens.add("ELSE : sino");
                jj_consume_token(ELSE);
                break;
            case ELSEIF:
                listaDeTokens.add("ELSEIF : sino si");
                jj_consume_token(ELSEIF);
                break;
            case SWITCH:
                listaDeTokens.add("SWITCH : switch");
                jj_consume_token(SWITCH);
                break;
            case CASE:
                listaDeTokens.add("CASE : caso");
                jj_consume_token(CASE);
                break;
            case FOR:
                listaDeTokens.add("FOR : para");
                jj_consume_token(FOR);
                break;
            case FOREACH:
                listaDeTokens.add("FOREACH : paracada");
                jj_consume_token(FOREACH);
                break;
            case WHILE:
                listaDeTokens.add("WHILE : mientras");
                jj_consume_token(WHILE);
                break;
            case MAIN:
                listaDeTokens.add("MAIN : principal");
                jj_consume_token(MAIN);
                break;
            case TYPEINT:
                listaDeTokens.add("TYPEINT : entero");
                jj_consume_token(TYPEINT);
                break;
            case TYPEFLOAT:
                listaDeTokens.add("TYPEFLOAT : flotante");
                jj_consume_token(TYPEFLOAT);
                break;
            case READ:
                listaDeTokens.add("READ : leer");
                jj_consume_token(READ);
                break;
            case WRITE:
                listaDeTokens.add("WRITE : escribir");
                jj_consume_token(WRITE);
                break;
            case PLUS:
                listaDeTokens.add("PLUS : +");
                jj_consume_token(PLUS);
                break;
            case LESS:
                listaDeTokens.add("LESS : -");
                jj_consume_token(LESS);
                break;
            case MULTIPLY:
                listaDeTokens.add("MULTIPLY : *");
                jj_consume_token(MULTIPLY);
                break;
            case EXPONENT:
                listaDeTokens.add("EXPONENT : **");
                jj_consume_token(EXPONENT);
                break;
            case DIVIDE:
                listaDeTokens.add("DIVIDE : /");
                jj_consume_token(DIVIDE);
                break;
            case GREATERTHEN:
                listaDeTokens.add("GREATERTHEN : >");
                jj_consume_token(GREATERTHEN);
                break;
            case SMALLERTHEN:
                listaDeTokens.add("SMALLERTHEN : <");
                jj_consume_token(SMALLERTHEN);
                break;
            case GREATEREQUALTHEN:
                listaDeTokens.add("GREATEREQUALTHEN : >=");
                jj_consume_token(GREATEREQUALTHEN);
                break;
            case SMALLEREQUALTHEN:
                listaDeTokens.add("SMALLEREQUALTHEN : <=");
                jj_consume_token(SMALLEREQUALTHEN);
                break;
            case EQUALS:
                listaDeTokens.add("EQUALS : ==");
                jj_consume_token(EQUALS);
                break;
            case NOTEQUALS:
                listaDeTokens.add("NOTEQUALS : !=");
                jj_consume_token(NOTEQUALS);
                break;
            case ASIGNATION:
                listaDeTokens.add("ASIGNATION : =");
                jj_consume_token(ASIGNATION);
                break;
            case TERNARY:
                listaDeTokens.add("TERNARY : ?");
                jj_consume_token(TERNARY);
                break;
            case ALTERNATIVE:
                listaDeTokens.add("ALTERNATIVE : :");
                jj_consume_token(ALTERNATIVE);
                break;
            case SEMICOLON:
                listaDeTokens.add("SEMICOLON : ;");
                jj_consume_token(SEMICOLON);
                break;
            case COMMA:
                listaDeTokens.add("COMMA : ,");
                jj_consume_token(COMMA);
                break;
            case KEY1:
                listaDeTokens.add("KEY1 : {");
                jj_consume_token(KEY1);
                break;
            case KEY2:
                listaDeTokens.add("KEY2 : }");
                jj_consume_token(KEY2);
                break;
            case PAR1:
                listaDeTokens.add("PAR1 : (");
                jj_consume_token(PAR1);
                break;
            case PAR2:
                listaDeTokens.add("PAR2 : )");
                jj_consume_token(PAR2);
                break;
            case INTEGER:
                listaDeTokens.add("INTEGER");
                jj_consume_token(INTEGER);
                break;
            case FLOAT:
                listaDeTokens.add("FLOAT");
                jj_consume_token(FLOAT);
                break;
            case STRING:
                listaDeTokens.add("STRING");
                jj_consume_token(STRING);
                break;
            case COMMENT1:
                listaDeTokens.add("COMMENT1");
                jj_consume_token(COMMENT1);
                break;
            case COMMENTM:
                listaDeTokens.add("COMMENTM");
                jj_consume_token(COMMENTM);
                break;
            case ID:
                listaDeTokens.add("ID");
                jj_consume_token(ID);
                break;
            default:
                jj_la1[0] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
    }

    //Terminan mis modificaciones al codigo
//Terminaria expresiones regulares
//Inicia dramatica
    final public void Tokens() throws ParseException {
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case IF:
                jj_consume_token(IF);
                break;
            case ELSE:
                jj_consume_token(ELSE);
                break;
            case ELSEIF:
                jj_consume_token(ELSEIF);
                break;
            case SWITCH:
                jj_consume_token(SWITCH);
                break;
            case CASE:
                jj_consume_token(CASE);
                break;
            case FOR:
                jj_consume_token(FOR);
                break;
            case FOREACH:
                jj_consume_token(FOREACH);
                break;
            case WHILE:
                jj_consume_token(WHILE);
                break;
            case MAIN:
                jj_consume_token(MAIN);
                break;
            case TYPEINT:
                jj_consume_token(TYPEINT);
                break;
            case TYPEFLOAT:
                jj_consume_token(TYPEFLOAT);
                break;
            case READ:
                jj_consume_token(READ);
                break;
            case WRITE:
                jj_consume_token(WRITE);
                break;
            case PLUS:
                jj_consume_token(PLUS);
                break;
            case LESS:
                jj_consume_token(LESS);
                break;
            case MULTIPLY:
                jj_consume_token(MULTIPLY);
                break;
            case EXPONENT:
                jj_consume_token(EXPONENT);
                break;
            case DIVIDE:
                jj_consume_token(DIVIDE);
                break;
            case GREATERTHEN:
                jj_consume_token(GREATERTHEN);
                break;
            case SMALLERTHEN:
                jj_consume_token(SMALLERTHEN);
                break;
            case GREATEREQUALTHEN:
                jj_consume_token(GREATEREQUALTHEN);
                break;
            case SMALLEREQUALTHEN:
                jj_consume_token(SMALLEREQUALTHEN);
                break;
            case EQUALS:
                jj_consume_token(EQUALS);
                break;
            case ASIGNATION:
                jj_consume_token(ASIGNATION);
                break;
            case TERNARY:
                jj_consume_token(TERNARY);
                break;
            case ALTERNATIVE:
                jj_consume_token(ALTERNATIVE);
                break;
            case NOTEQUALS:
                jj_consume_token(NOTEQUALS);
                break;
            case SEMICOLON:
                jj_consume_token(SEMICOLON);
                break;
            case COMMA:
                jj_consume_token(COMMA);
                break;
            case KEY1:
                jj_consume_token(KEY1);
                break;
            case KEY2:
                jj_consume_token(KEY2);
                break;
            case PAR1:
                jj_consume_token(PAR1);
                break;
            case PAR2:
                jj_consume_token(PAR2);
                break;
            case INTEGER:
                jj_consume_token(INTEGER);
                break;
            case FLOAT:
                jj_consume_token(FLOAT);
                break;
            case STRING:
                jj_consume_token(STRING);
                break;
            case COMMENT1:
                jj_consume_token(COMMENT1);
                break;
            case COMMENTM:
                jj_consume_token(COMMENTM);
                break;
            case ID:
                jj_consume_token(ID);
                break;
            default:
                jj_la1[0] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
    }

    final public void ProbarLexico() throws ParseException {
        label_1:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case IF:
                case ELSE:
                case ELSEIF:
                case SWITCH:
                case CASE:
                case MAIN:
                case FOR:
                case FOREACH:
                case WHILE:
                case TYPEINT:
                case TYPEFLOAT:
                case READ:
                case WRITE:
                case PLUS:
                case LESS:
                case MULTIPLY:
                case EXPONENT:
                case DIVIDE:
                case GREATERTHEN:
                case SMALLERTHEN:
                case GREATEREQUALTHEN:
                case SMALLEREQUALTHEN:
                case EQUALS:
                case NOTEQUALS:
                case ASIGNATION:
                case TERNARY:
                case ALTERNATIVE:
                case SEMICOLON:
                case COMMA:
                case KEY1:
                case KEY2:
                case PAR1:
                case PAR2:
                case INTEGER:
                case FLOAT:
                case STRING:
                case COMMENT1:
                case COMMENTM:
                case ID:
        ;
                    break;
                default:
                    jj_la1[1] = jj_gen;
                    break label_1;
            }
            Tokens();
        }
        jj_consume_token(0);
    }

// programa -> Inicio secuencia-sent Fin
    final public void Programa() throws ParseException {
        jj_consume_token(MAIN);
        jj_consume_token(KEY1);
        label_2:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case IF:
                case FOR:
                case WHILE:
                case TYPEINT:
                case TYPEFLOAT:
                case READ:
                case WRITE:
                case COMMENT1:
                case COMMENTM:
                case ID:
        ;
                    break;
                default:
                    jj_la1[2] = jj_gen;
                    break label_2;
            }
            Sentencia();
        }
        jj_consume_token(KEY2);
        jj_consume_token(0);
    }

    final public void Sentencia() throws ParseException {
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case IF:
                Sent_if();
                break;
            case WHILE:
                Sent_while();
                break;
            case FOR:
                Sent_for();
                break;
            case TYPEINT:
            case TYPEFLOAT:
                Declaration();
                jj_consume_token(SEMICOLON);
                break;
            case READ:
                Sent_read();
                jj_consume_token(SEMICOLON);
                break;
            case WRITE:
                Sent_write();
                jj_consume_token(SEMICOLON);
                break;
            case ID:
                Asignation();
                jj_consume_token(SEMICOLON);
                break;
            case COMMENT1:
                jj_consume_token(COMMENT1);
                break;
            case COMMENTM:
                jj_consume_token(COMMENTM);
                break;
            default:
                jj_la1[3] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
    }

    final public void Sent_if() throws ParseException {
        jj_consume_token(IF);
        jj_consume_token(PAR1);
        Exp();
        jj_consume_token(PAR2);
        jj_consume_token(KEY1);
        label_3:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case IF:
                case FOR:
                case WHILE:
                case TYPEINT:
                case TYPEFLOAT:
                case READ:
                case WRITE:
                case COMMENT1:
                case COMMENTM:
                case ID:
        ;
                    break;
                default:
                    jj_la1[4] = jj_gen;
                    break label_3;
            }
            Sentencia();
        }
        jj_consume_token(KEY2);
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case ELSEIF:
                jj_consume_token(ELSEIF);
                jj_consume_token(PAR1);
                Exp();
                jj_consume_token(PAR2);
                jj_consume_token(KEY1);
                label_4:
                while (true) {
                    switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                        case IF:
                        case FOR:
                        case WHILE:
                        case TYPEINT:
                        case TYPEFLOAT:
                        case READ:
                        case WRITE:
                        case COMMENT1:
                        case COMMENTM:
                        case ID:
          ;
                            break;
                        default:
                            jj_la1[5] = jj_gen;
                            break label_4;
                    }
                    Sentencia();
                }
                jj_consume_token(KEY2);
                break;
            default:
                jj_la1[6] = jj_gen;
                ;
        }
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case ELSE:
                jj_consume_token(ELSE);
                jj_consume_token(KEY1);
                label_5:
                while (true) {
                    switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                        case IF:
                        case FOR:
                        case WHILE:
                        case TYPEINT:
                        case TYPEFLOAT:
                        case READ:
                        case WRITE:
                        case COMMENT1:
                        case COMMENTM:
                        case ID:
          ;
                            break;
                        default:
                            jj_la1[7] = jj_gen;
                            break label_5;
                    }
                    Sentencia();
                }
                jj_consume_token(KEY2);
                break;
            default:
                jj_la1[8] = jj_gen;
                ;
        }
    }

    final public void Sent_while() throws ParseException {
        jj_consume_token(WHILE);
        jj_consume_token(PAR1);
        Exp();
        jj_consume_token(PAR2);
        jj_consume_token(KEY1);
        label_6:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case IF:
                case FOR:
                case WHILE:
                case TYPEINT:
                case TYPEFLOAT:
                case READ:
                case WRITE:
                case COMMENT1:
                case COMMENTM:
                case ID:
        ;
                    break;
                default:
                    jj_la1[9] = jj_gen;
                    break label_6;
            }
            Sentencia();
        }
        jj_consume_token(KEY2);
    }

    final public void Sent_for() throws ParseException {
        jj_consume_token(FOR);
        jj_consume_token(PAR1);
        Asignation();
        jj_consume_token(SEMICOLON);
        Exp();
        jj_consume_token(SEMICOLON);
        Asignation();
        jj_consume_token(SEMICOLON);
        jj_consume_token(PAR2);
        jj_consume_token(KEY1);
        label_7:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case IF:
                case FOR:
                case WHILE:
                case TYPEINT:
                case TYPEFLOAT:
                case READ:
                case WRITE:
                case COMMENT1:
                case COMMENTM:
                case ID:
        ;
                    break;
                default:
                    jj_la1[10] = jj_gen;
                    break label_7;
            }
            Sentencia();
        }
        jj_consume_token(KEY2);
    }

    final public void Declaration() throws ParseException {
        Tipo();
        jj_consume_token(ID);
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case ASIGNATION:
                jj_consume_token(ASIGNATION);
                Exp();
                switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                    case TERNARY:
                        jj_consume_token(TERNARY);
                        Exp();
                        jj_consume_token(ALTERNATIVE);
                        Exp();
                        break;
                    default:
                        jj_la1[11] = jj_gen;
                        ;
                }
                break;
            default:
                jj_la1[12] = jj_gen;
                ;
        }
    }

    final public void Tipo() throws ParseException {
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case TYPEINT:
                jj_consume_token(TYPEINT);
                break;
            case TYPEFLOAT:
                jj_consume_token(TYPEFLOAT);
                break;
            default:
                jj_la1[13] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
    }

    final public void Sent_read() throws ParseException {
        jj_consume_token(READ);
        jj_consume_token(PAR1);
        jj_consume_token(ID);
        jj_consume_token(PAR2);
    }

    final public void Sent_write() throws ParseException {
        jj_consume_token(WRITE);
        jj_consume_token(PAR1);
        jj_consume_token(STRING);
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case PAR1:
            case INTEGER:
            case FLOAT:
            case ID:
                Exp();
                break;
            default:
                jj_la1[14] = jj_gen;
                ;
        }
        jj_consume_token(PAR2);
    }

    final public void Asignation() throws ParseException {
        jj_consume_token(ID);
        jj_consume_token(ASIGNATION);
        Exp();
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case TERNARY:
                jj_consume_token(TERNARY);
                Exp();
                jj_consume_token(ALTERNATIVE);
                Exp();
                break;
            default:
                jj_la1[15] = jj_gen;
                ;
        }
    }

    final public void Exp() throws ParseException {
        Exp_simple();
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case GREATERTHEN:
            case SMALLERTHEN:
            case GREATEREQUALTHEN:
            case SMALLEREQUALTHEN:
            case EQUALS:
            case NOTEQUALS:
                Op_comparation();
                Exp_simple();
                break;
            default:
                jj_la1[16] = jj_gen;
                ;
        }
    }

    final public void Op_comparation() throws ParseException {
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case SMALLERTHEN:
                jj_consume_token(SMALLERTHEN);
                break;
            case GREATERTHEN:
                jj_consume_token(GREATERTHEN);
                break;
            case SMALLEREQUALTHEN:
                jj_consume_token(SMALLEREQUALTHEN);
                break;
            case GREATEREQUALTHEN:
                jj_consume_token(GREATEREQUALTHEN);
                break;
            case EQUALS:
                jj_consume_token(EQUALS);
                break;
            case NOTEQUALS:
                jj_consume_token(NOTEQUALS);
                break;
            default:
                jj_la1[17] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
    }

    final public void Exp_simple() throws ParseException {
        Term();
        label_8:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case PLUS:
                case LESS:
        ;
                    break;
                default:
                    jj_la1[18] = jj_gen;
                    break label_8;
            }
            Op_low();
            Term();
        }
    }

    final public void Op_low() throws ParseException {
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case PLUS:
                jj_consume_token(PLUS);
                break;
            case LESS:
                jj_consume_token(LESS);
                break;
            default:
                jj_la1[19] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
    }

    final public void Term() throws ParseException {
        Factor();
        label_9:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case MULTIPLY:
                case DIVIDE:
        ;
                    break;
                default:
                    jj_la1[20] = jj_gen;
                    break label_9;
            }
            Op_high();
            Factor();
        }
    }

    final public void Op_high() throws ParseException {
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case MULTIPLY:
                jj_consume_token(MULTIPLY);
                break;
            case DIVIDE:
                jj_consume_token(DIVIDE);
                break;
            default:
                jj_la1[21] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
    }

    final public void Factor() throws ParseException {
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case PAR1:
                jj_consume_token(PAR1);
                Exp();
                jj_consume_token(PAR2);
                break;
            case FLOAT:
                jj_consume_token(FLOAT);
                break;
            case INTEGER:
                jj_consume_token(INTEGER);
                break;
            case ID:
                jj_consume_token(ID);
                break;
            default:
                jj_la1[22] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
    }

    /**
     * Generated Token Manager.
     */
    public CapradyCodeTokenManager token_source;
    JavaCharStream jj_input_stream;
    /**
     * Current token.
     */
    public Token token;
    /**
     * Next token.
     */
    public Token jj_nt;
    private int jj_ntk;
    private int jj_gen;
    final private int[] jj_la1 = new int[23];
    static private int[] jj_la1_0;
    static private int[] jj_la1_1;

    static {
        jj_la1_init_0();
        jj_la1_init_1();
    }

    private static void jj_la1_init_0() {
        jj_la1_0 = new int[]{0xfffffffe, 0xfffffffe, 0x3e82, 0x3e82, 0x3e82, 0x3e82, 0x8, 0x3e82, 0x4, 0x3e82, 0x3e82, 0x4000000, 0x2000000, 0xc00, 0x0, 0x4000000, 0x1f80000, 0x1f80000, 0xc000, 0xc000, 0x50000, 0x50000, 0x0,};
    }

    private static void jj_la1_init_1() {
        jj_la1_1 = new int[]{0x3f3, 0x3f3, 0x380, 0x380, 0x380, 0x380, 0x0, 0x380, 0x0, 0x380, 0x380, 0x0, 0x0, 0x0, 0x231, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x231,};
    }

    /**
     * Constructor with InputStream.
     */
    public CapradyCode(java.io.InputStream stream) {
        this(stream, null);
    }

    /**
     * Constructor with InputStream and supplied encoding
     */
    public CapradyCode(java.io.InputStream stream, String encoding) {
        try {
            jj_input_stream = new JavaCharStream(stream, encoding, 1, 1);
        } catch (java.io.UnsupportedEncodingException e) {
            throw new RuntimeException(e);
        }
        token_source = new CapradyCodeTokenManager(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 23; i++) {
            jj_la1[i] = -1;
        }
    }

    /**
     * Reinitialise.
     */
    public void ReInit(java.io.InputStream stream) {
        ReInit(stream, null);
    }

    /**
     * Reinitialise.
     */
    public void ReInit(java.io.InputStream stream, String encoding) {
        try {
            jj_input_stream.ReInit(stream, encoding, 1, 1);
        } catch (java.io.UnsupportedEncodingException e) {
            throw new RuntimeException(e);
        }
        token_source.ReInit(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 23; i++) {
            jj_la1[i] = -1;
        }
    }

    /**
     * Constructor.
     */
    public CapradyCode(java.io.Reader stream) {
        jj_input_stream = new JavaCharStream(stream, 1, 1);
        token_source = new CapradyCodeTokenManager(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 23; i++) {
            jj_la1[i] = -1;
        }
    }

    /**
     * Reinitialise.
     */
    public void ReInit(java.io.Reader stream) {
        jj_input_stream.ReInit(stream, 1, 1);
        token_source.ReInit(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 23; i++) {
            jj_la1[i] = -1;
        }
    }

    /**
     * Constructor with generated Token Manager.
     */
    public CapradyCode(CapradyCodeTokenManager tm) {
        token_source = tm;
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 23; i++) {
            jj_la1[i] = -1;
        }
    }

    /**
     * Reinitialise.
     */
    public void ReInit(CapradyCodeTokenManager tm) {
        token_source = tm;
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 23; i++) {
            jj_la1[i] = -1;
        }
    }

    private Token jj_consume_token(int kind) throws ParseException {
        Token oldToken;
        if ((oldToken = token).next != null) {
            token = token.next;
        } else {
            token = token.next = token_source.getNextToken();
        }
        jj_ntk = -1;
        if (token.kind == kind) {
            jj_gen++;
            return token;
        }
        token = oldToken;
        jj_kind = kind;
        throw generateParseException();
    }

    /**
     * Get the next Token.
     */
    final public Token getNextToken() {
        if (token.next != null) {
            token = token.next;
        } else {
            token = token.next = token_source.getNextToken();
        }
        jj_ntk = -1;
        jj_gen++;
        return token;
    }

    /**
     * Get the specific Token.
     */
    final public Token getToken(int index) {
        Token t = token;
        for (int i = 0; i < index; i++) {
            if (t.next != null) {
                t = t.next;
            } else {
                t = t.next = token_source.getNextToken();
            }
        }
        return t;
    }

    private int jj_ntk() {
        if ((jj_nt = token.next) == null) {
            return (jj_ntk = (token.next = token_source.getNextToken()).kind);
        } else {
            return (jj_ntk = jj_nt.kind);
        }
    }

    private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
    private int[] jj_expentry;
    private int jj_kind = -1;

    /**
     * Generate ParseException.
     */
    public ParseException generateParseException() {
        jj_expentries.clear();
        boolean[] la1tokens = new boolean[46];
        if (jj_kind >= 0) {
            la1tokens[jj_kind] = true;
            jj_kind = -1;
        }
        for (int i = 0; i < 23; i++) {
            if (jj_la1[i] == jj_gen) {
                for (int j = 0; j < 32; j++) {
                    if ((jj_la1_0[i] & (1 << j)) != 0) {
                        la1tokens[j] = true;
                    }
                    if ((jj_la1_1[i] & (1 << j)) != 0) {
                        la1tokens[32 + j] = true;
                    }
                }
            }
        }
        for (int i = 0; i < 46; i++) {
            if (la1tokens[i]) {
                jj_expentry = new int[1];
                jj_expentry[0] = i;
                jj_expentries.add(jj_expentry);
            }
        }
        int[][] exptokseq = new int[jj_expentries.size()][];
        for (int i = 0; i < jj_expentries.size(); i++) {
            exptokseq[i] = jj_expentries.get(i);
        }
        return new ParseException(token, exptokseq, tokenImage);
    }

    /**
     * Enable tracing.
     */
    final public void enable_tracing() {
    }

    /**
     * Disable tracing.
     */
    final public void disable_tracing() {
    }

}
