//
// Generated by JTB 1.3.2
//
package visitor;

import syntaxtree.*;
import java.util.*;
import javax.swing.tree.DefaultMutableTreeNode;

/**
 * All void visitors must implement this interface.
 */
public interface Visitor {

    //
    // void Auto class visitors
    //
    public void visit(NodeList n);

    public void visit(NodeListOptional n);

    public void visit(NodeOptional n);

    public void visit(NodeSequence n);

    public void visit(NodeToken n);

    public void visit(NodeList n, DefaultMutableTreeNode parent);

    public void visit(NodeListOptional n, DefaultMutableTreeNode parent);

    public void visit(NodeOptional n, DefaultMutableTreeNode parent);

    public void visit(NodeSequence n, DefaultMutableTreeNode parent);

    public void visit(NodeToken n, DefaultMutableTreeNode parent);

    //
    // User-generated visitor methods below
    //
    /**
     * f0 -> <IF>
     * | <ELSE>
     * | <ELSEIF>
     * | <SWITCH>
     * | <CASE>
     * | <FOR>
     * | <FOREACH>
     * | <WHILE>
     * | <MAIN>
     * | <TYPEINT>
     * | <TYPEFLOAT>
     * | <READ>
     * | <WRITE>
     * | <PLUS>
     * | <LESS>
     * | <MULTIPLY>
     * | <EXPONENT>
     * | <DIVIDE>
     * | <GREATERTHEN>
     * | <SMALLERTHEN>
     * | <GREATEREQUALTHEN>
     * | <SMALLEREQUALTHEN>
     * | <EQUALS>
     * | <ASIGNATION>
     * | <TERNARY>
     * | <ALTERNATIVE>
     * | <SEMICOLON>
     * | <COMMA>
     * | <KEY1>
     * | <KEY2>
     * | <PAR1>
     * | <PAR2>
     * | <INTEGER>
     * | <FLOAT>
     * | <STRING>
     * | <COMMENT1>
     * | <COMMENTM>
     * | <ID>
     */
    public void visit(Tokens n);

    public void visit(Tokens n, DefaultMutableTreeNode parent);

    /**
     * f0 -> <MAIN>
     * f1 -> <KEY1>
     * f2 -> ( Sentencia() )* f3 -> <KEY2>
     * f4 -> <EOF>
     */
    public void visit(Programa n);

    public void visit(Programa n, DefaultMutableTreeNode parent);

    /**
     * f0 -> Sent_if() | Sent_while() | Sent_for() | Declaration() <SEMICOLON>
     * | Sent_read() <SEMICOLON>
     * | Sent_write() <SEMICOLON>
     * | Asignation() <SEMICOLON>
     * | <COMMENT1>
     * | <COMMENTM>
     */
    public void visit(Sentencia n);

    public void visit(Sentencia n, DefaultMutableTreeNode parent);

    /**
     * f0 -> <IF>
     * f1 -> <PAR1>
     * f2 -> Exp() f3 -> <PAR2>
     * f4 -> <KEY1>
     * f5 -> ( Sentencia() )* f6 -> <KEY2>
     * f7 -> ( <ELSEIF> <PAR1> Exp() <PAR2> <KEY1> ( Sentencia() )* <KEY2> )? f8
     * -> ( <ELSE> <KEY1> ( Sentencia() )* <KEY2> )?
     */
    public void visit(Sent_if n);

    public void visit(Sent_if n, DefaultMutableTreeNode parent);

    /**
     * f0 -> <WHILE>
     * f1 -> <PAR1>
     * f2 -> Exp() f3 -> <PAR2>
     * f4 -> <KEY1>
     * f5 -> ( Sentencia() )* f6 -> <KEY2>
     */
    public void visit(Sent_while n);

    public void visit(Sent_while n, DefaultMutableTreeNode parent);

    /**
     * f0 -> <FOR>
     * f1 -> <PAR1>
     * f2 -> Asignation() f3 -> <SEMICOLON>
     * f4 -> Exp() f5 -> <SEMICOLON>
     * f6 -> Asignation() f7 -> <SEMICOLON>
     * f8 -> <PAR2>
     * f9 -> <KEY1>
     * f10 -> ( Sentencia() )* f11 -> <KEY2>
     */
    public void visit(Sent_for n);

    public void visit(Sent_for n, DefaultMutableTreeNode parent);

    /**
     * f0 -> Tipo() f1 -> <ID>
     * f2 -> ( <ASIGNATION> Exp() ( <TERNARY> Exp() <ALTERNATIVE> Exp() )? )?
     */
    public void visit(Declaration n);

    public void visit(Declaration n, DefaultMutableTreeNode parent);

    /**
     * f0 -> <TYPEINT>
     * | <TYPEFLOAT>
     */
    public void visit(Tipo n);

    public void visit(Tipo n, DefaultMutableTreeNode parent);

    /**
     * f0 -> <READ>
     * f1 -> <PAR1>
     * f2 -> <ID>
     * f3 -> <PAR2>
     */
    public void visit(Sent_read n);

    public void visit(Sent_read n, DefaultMutableTreeNode parent);

    /**
     * f0 -> <WRITE>
     * f1 -> <PAR1>
     * f2 -> <STRING>
     * f3 -> ( Exp() )? f4 -> <PAR2>
     */
    public void visit(Sent_write n);

    public void visit(Sent_write n, DefaultMutableTreeNode parent);

    /**
     * f0 -> <ID>
     * f1 -> <ASIGNATION>
     * f2 -> Exp() f3 -> ( <TERNARY> Exp() <ALTERNATIVE> Exp() )?
     */
    public void visit(Asignation n);

    public void visit(Asignation n, DefaultMutableTreeNode parent);

    /**
     * f0 -> Exp_simple() f1 -> ( Op_comparation() Exp_simple() )?
     */
    public void visit(Exp n);

    public void visit(Exp n, DefaultMutableTreeNode parent);

    /**
     * f0 -> <SMALLERTHEN>
     * | <GREATERTHEN>
     * | <SMALLEREQUALTHEN>
     * | <GREATEREQUALTHEN>
     * | <EQUALS>
     * | <NOTEQUALS>
     */
    public void visit(Op_comparation n);

    public void visit(Op_comparation n, DefaultMutableTreeNode parent);

    /**
     * f0 -> Term() f1 -> ( Op_low() Term() )*
     */
    public void visit(Exp_simple n);

    public void visit(Exp_simple n, DefaultMutableTreeNode parent);

    /**
     * f0 -> "+" | "-"
     */
    public void visit(Op_low n);

    public void visit(Op_low n, DefaultMutableTreeNode parent);

    /**
     * f0 -> Factor() f1 -> ( Op_high() Factor() )*
     */
    public void visit(Term n);

    public void visit(Term n, DefaultMutableTreeNode parent);

    /**
     * f0 -> "*" | "/"
     */
    public void visit(Op_high n);

    public void visit(Op_high n, DefaultMutableTreeNode parent);

    /**
     * f0 -> <PAR1> Exp() <PAR2>
     * | <FLOAT>
     * | <INTEGER>
     * | <ID>
     */
    public void visit(Factor n);

    public void visit(Factor n, DefaultMutableTreeNode parent);

}
